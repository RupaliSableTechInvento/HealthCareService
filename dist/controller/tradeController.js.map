{"version":3,"sources":["../../src/controller/tradeController.js"],"names":["postatrade","require","tradeMoreInfo","usersModel","async","moment","mongoose","tradeController","getAll","req","res","next","find","err","trade","json","isError","data","getPriceEquation","getQuickByCryptocurrency","console","log","request","query","perpage","pagination","page","skip","amount","cryptoCurrency","location","tradeMethod","traderType","payment_method","currency","$lte","$gte","meta","pages","$lt","$gt","count","total","sort","field","limit","parseInt","getByCurrencyLoc","getTrade","user","getOne","body","params","findById","id","create","userObj","_id","first_name","firstName","tradeInfo","findOneAndUpdate","user_id","UpdateUser","update","new","delete","remove","ok","Types","ObjectId","module","exports"],"mappings":"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","file":"tradeController.js","sourcesContent":["var postatrade = require('../models/postatrade')\r\nvar tradeMoreInfo = require('../models/tradeMoreInfo')\r\nvar usersModel = require('../models/usersModel')\r\nvar async = require('async')\r\nvar moment = require('moment');\r\nvar mongoose = require('mongoose');\r\n// var request = require('request');\r\n\r\nconst tradeController = {\r\n\r\n  getAll: async(req, res, next) => {\r\n    postatrade.find({}, (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      });\r\n    });\r\n  },\r\n  getPriceEquation: (req, res, next) => {\r\n    // console.log(\"Req for getPriceEquation=>\", req.query);\r\n    // var dataObj = req.query.dataObj;\r\n    // var much = 100;\r\n    // var url = 'http://www.xe.com/currencyconverter/convert/?Amount=' + much + '&From=' + dataObj.from + '&To=' + dataObj.to;\r\n\r\n    // console.log(\"url==>\", url);\r\n    // request(url, function(err, resp, body) {\r\n    //   // body = JSON.parse(body);\r\n    //   console.log(\" response for getPriceEquation==>\", body)\r\n    //     // logic used to compare search results with the input from user\r\n    //   if (!body.query.results.RDF.item) {\r\n    //     craig = \"No results found. Try again.\";\r\n    //   } else {\r\n    //     craig = body.query.results.RDF.item[0]['about'];\r\n    //     console.log(\"in else==>craig\", craig);\r\n    //   }\r\n    // });\r\n    // $.ajax({\r\n    //   url: 'http://www.xe.com/currencyconverter/convert/?Amount=' + much + '&From=' + dataObj.from + '&To=' + dataObj.to,\r\n    //   // url: 'https://api.cryptonator.com/api/ticker/' + dataObj.from + '-' + dataObj.to,\r\n    //   type: \"get\",\r\n    //   success: function(successData) {\r\n    //     console.log(\"sucesss data in price equation in api.js=> \", successData);\r\n    //     // resolve(successData)\r\n    //   },\r\n    //   error: function(err) {\r\n    //     alert(err);\r\n    //   }\r\n    // })\r\n\r\n  },\r\n\r\n  getQuickByCryptocurrency: async(req, res, next) => {\r\n    console.log(\"quickBUY/SELL\");\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var amount = req.query.query.amount;\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n    var payment_method = req.query.query.payment_method;\r\n    var currency = req.query.query.currency;\r\n    // 'more_information.currency': currency,\r\n    console.log(\"trader type   amount=>>\", traderType, amount);\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n      'more_information.min_trans_limit': {\r\n        $lte: amount\r\n      },\r\n      'more_information.max_trans_limit': {\r\n        $gte: amount\r\n      },\r\n      'more_information.currency': currency,\r\n      payment_method: payment_method\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.min_trans_limit': {\r\n              $lt: amount\r\n            },\r\n            'more_information.max_trans_limit': {\r\n              $gt: amount\r\n            },\r\n            'more_information.currency': currency,\r\n            'payment_method': payment_method\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            'more_information.min_trans_limit': {\r\n              $lt: amount\r\n            },\r\n            'more_information.max_trans_limit': {\r\n              $gt: amount\r\n            },\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n            'more_information.currency': currency,\r\n\r\n            // payment_method: payment_method\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n  getByCurrencyLoc: async(req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n    }\r\n    var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    var location = req.query.query.location;\r\n    var tradeMethod = req.query.query.tradeMethod;\r\n    var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      cryptoCurrency: cryptoCurrency,\r\n      // location: location,\r\n      tradeMethod: tradeMethod,\r\n      traderType: traderType,\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            cryptoCurrency: cryptoCurrency,\r\n            location: location,\r\n            tradeMethod: tradeMethod,\r\n            traderType: traderType,\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n\r\n\r\n  getTrade: async(req, res, next) => {\r\n    var request = req.query.query;\r\n    var perpage = req.query.pagination.perpage;\r\n    var page = req.query.pagination.page;\r\n    var skip = 0;\r\n    if (page > 1) {\r\n      skip = perpage * (page - 1);\r\n      console.log(\"perpage page skip=>\", perpage, page, skip);\r\n\r\n    }\r\n    var user = req.query.query.user;\r\n    // var cryptoCurrency = req.query.query.cryptoCurrency;\r\n    // var location = req.query.query.location;\r\n    // var tradeMethod = req.query.query.tradeMethod;\r\n    // var traderType = req.query.query.traderType;\r\n\r\n    postatrade.find({\r\n      user: user\r\n\r\n    }, async(err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        meta: {\r\n          page: req.query.pagination.page,\r\n          pages: (await postatrade.find({\r\n            user: user\r\n\r\n          }).count() / (10)),\r\n          perpage: req.query.pagination.perpage,\r\n          total: await postatrade.find({\r\n            user: user\r\n\r\n          }).count(),\r\n          sort: \"asc\",\r\n          field: \"_id\",\r\n        },\r\n        data: trade,\r\n      }, )\r\n\r\n    }).limit(parseInt(req.query.pagination.perpage) || 10).skip(skip || '')\r\n  },\r\n\r\n\r\n  getOne: (req, res, next) => {\r\n    console.log(\"req=> for get One tradeController\", req.body, req.params, req.query);\r\n    postatrade.findById(req.query.id, (err, trade) => {\r\n      if (err) {\r\n        res.json({\r\n          isError: true,\r\n          data: err\r\n        });\r\n      }\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      });\r\n    });\r\n  },\r\n\r\n  create: async(req, res, next) => {\r\n\r\n    var params = req.body;\r\n\r\n    var userObj = await usersModel.find({\r\n      '_id': req.body.user\r\n    }, {\r\n      _id: 0,\r\n      first_name: 1\r\n    });\r\n\r\n    /*  params.firstName = await usersModel.findOne({ '_id': req.body.user }, { _id: 0, first_name: 1 }, (err, user) => {\r\n       if (err) {\r\n         res.json({ isError: true, data: err });\r\n       } else { res.json({ isError: false, data: user }); }\r\n     }); */\r\n    params.firstName = userObj[0].first_name;\r\n    console.log(\"params in posrt trade=>>\", params);\r\n\r\n    postatrade.create(params, function(err, trade) {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      else {\r\n        tradeMoreInfo.create({\r\n          'trade_id': trade._id,\r\n          'user_id': trade.user\r\n        }, function(err, tradeInfo) {\r\n          if (err) return res.json({\r\n            isError: true,\r\n            data: err\r\n          });\r\n          else {\r\n            usersModel.findOneAndUpdate({\r\n              '_id': tradeInfo.user_id\r\n            }, {\r\n              \"trade_info\": tradeInfo._id\r\n            }, function(err, UpdateUser) {\r\n              if (err) return res.json({\r\n                isError: true,\r\n                data: err\r\n              });\r\n              res.json({\r\n                isError: false,\r\n                data: UpdateUser\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    postatrade.findOneAndUpdate(req.params.id, req.body, {\r\n      new: true\r\n    }, (err, trade) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: trade\r\n      })\r\n    });\r\n  },\r\n\r\n  delete: (req, res, next) => {\r\n    postatrade.remove({\r\n      _id: req.params.id\r\n    }, (err, ok) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n    });\r\n    res.json({\r\n      isError: false,\r\n      data: true\r\n    })\r\n  },\r\n\r\n  update: (req, res, next) => {\r\n    var id = mongoose.Types.ObjectId(req.body.id);\r\n    postatrade.findOneAndUpdate({\r\n      '_id': id\r\n    }, req.body, {\r\n      new: true\r\n    }, (err, user) => {\r\n      if (err) return res.json({\r\n        isError: true,\r\n        data: err\r\n      });\r\n      res.json({\r\n        isError: false,\r\n        data: user\r\n      })\r\n    });\r\n  },\r\n};\r\n\r\nmodule.exports=tradeController;"]}